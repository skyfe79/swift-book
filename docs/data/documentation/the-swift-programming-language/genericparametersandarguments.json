{"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"이 장에서는 제네릭 타입, 함수, 이니셜라이저에 사용되는 파라미터와 인자에 대해 설명한다. 제네릭 타입, 함수, 서브스크립트, 이니셜라이저를 선언할 때, 해당 제네릭이 처리할 수 있는 타입 파라미터를 지정한다. 이 타입 파라미터는 플레이스홀더 역할을 하며, 제네릭 타입의 인스턴스가 생성되거나 제네릭 함수나 이니셜라이저가 호출될 때 실제 구체적인 타입 인자로 대체된다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift에서 제네릭에 대한 개요는 "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"text":"를 참고한다.","type":"text"}]},{"anchor":"%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%A0%88","level":2,"type":"heading","text":"제네릭 매개변수 절"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"제네릭 매개변수 절"}]},{"text":"은 제네릭 타입이나 함수의 타입 매개변수를 정의한다. 이때 각 매개변수에 대한 제약 조건과 요구 사항을 함께 명시한다. 제네릭 매개변수 절은 꺾쇠 괄호(<>)로 둘러싸여 있으며, 다음과 같은 형태를 가진다.","type":"text"}]},{"code":["<<#generic parameter list#>>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"제네릭 매개변수 목록","type":"text"}],"type":"strong"},{"text":"은 쉼표로 구분된 제네릭 매개변수들의 목록이다. 각 매개변수는 다음과 같은 형태를 가진다.","type":"text"}],"type":"paragraph"},{"code":["<#type parameter#>: <#constraint#>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"제네릭 매개변수는 "},{"type":"strong","inlineContent":[{"type":"text","text":"타입 매개변수"}]},{"text":"와 선택적인 ","type":"text"},{"inlineContent":[{"text":"제약 조건","type":"text"}],"type":"strong"},{"type":"text","text":"으로 구성된다. "},{"inlineContent":[{"type":"text","text":"타입 매개변수"}],"type":"strong"},{"text":"는 단순히 플레이스홀더 타입의 이름이다. 예를 들어 ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"U"},{"type":"text","text":", "},{"type":"codeVoice","code":"V"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Key"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" 등이 있다. 타입 매개변수(그리고 관련된 타입들)는 해당 타입, 함수, 또는 초기화 선언의 나머지 부분에서 사용할 수 있다. 여기에는 함수나 초기화의 시그니처도 포함된다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"제약 조건","type":"text"}],"type":"strong"},{"type":"text","text":"은 타입 매개변수가 특정 클래스를 상속하거나 프로토콜 또는 프로토콜 조합을 준수해야 함을 명시한다. 예를 들어, 아래 제네릭 함수에서 "},{"type":"codeVoice","code":"T: Comparable"},{"text":"은 타입 매개변수 ","type":"text"},{"type":"codeVoice","code":"T"},{"text":"에 대체되는 모든 타입이 ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" 프로토콜을 준수해야 함을 나타낸다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"]},{"type":"paragraph","inlineContent":[{"text":"예를 들어 ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"은 모두 "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" 프로토콜을 준수하므로, 이 함수는 두 타입의 인자를 모두 받을 수 있다. 제네릭 타입과 달리, 제네릭 함수나 초기화를 사용할 때는 제네릭 인자 절을 명시하지 않는다. 대신 함수나 초기화에 전달된 인자의 타입으로부터 타입 인자를 추론한다."}]},{"type":"codeListing","syntax":"swift","code":["simpleMax(17, 42) \/\/ T는 Int로 추론됨","simpleMax(3.14159, 2.71828) \/\/ T는 Double로 추론됨"]},{"level":3,"type":"heading","anchor":"%EC%A0%9C%EB%84%A4%EB%A6%AD-Where-%EC%A0%88","text":"제네릭 Where 절"},{"type":"paragraph","inlineContent":[{"type":"text","text":"타입 매개변수와 관련 타입에 추가 요구사항을 지정하려면, 타입이나 함수의 본문을 여는 중괄호 바로 앞에 제네릭 "},{"type":"codeVoice","code":"where"},{"type":"text","text":" 절을 추가한다. 제네릭 "},{"code":"where","type":"codeVoice"},{"type":"text","text":" 절은 "},{"code":"where","type":"codeVoice"},{"text":" 키워드 뒤에 쉼표로 구분된 하나 이상의 ","type":"text"},{"inlineContent":[{"text":"요구사항","type":"text"}],"type":"emphasis"},{"type":"text","text":" 목록으로 구성된다."}]},{"code":["where <#requirements#>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"제네릭 ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" 절의 "},{"inlineContent":[{"text":"요구사항","type":"text"}],"type":"emphasis"},{"text":"은 타입 매개변수가 특정 클래스를 상속하거나 프로토콜 또는 프로토콜 조합을 준수하도록 지정한다. 제네릭 ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" 절은 타입 매개변수에 대한 간단한 제약 조건을 표현하는 데 사용할 수 있지만, 더 복잡한 제약 조건을 지정할 수도 있다. 예를 들어, 타입 매개변수의 관련 타입이 특정 프로토콜을 준수하도록 제약을 걸 수 있다. ","type":"text"},{"type":"codeVoice","code":"<S: Sequence> where S.Iterator.Element: Equatable"},{"text":"는 ","type":"text"},{"type":"codeVoice","code":"S"},{"type":"text","text":"가 "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" 프로토콜을 준수하고, "},{"code":"S.Iterator.Element","type":"codeVoice"},{"text":"가 ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" 프로토콜을 준수하도록 지정한다. 이 제약 조건은 시퀀스의 각 요소가 비교 가능하도록 보장한다."}]},{"inlineContent":[{"text":"또한 ","type":"text"},{"type":"codeVoice","code":"=="},{"type":"text","text":" 연산자를 사용해 두 타입이 동일해야 한다는 요구사항을 지정할 수 있다. 예를 들어, "},{"type":"codeVoice","code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element"},{"type":"text","text":"는 "},{"code":"S1","type":"codeVoice"},{"text":"과 ","type":"text"},{"type":"codeVoice","code":"S2"},{"text":"가 ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" 프로토콜을 준수하고, 두 시퀀스의 요소가 동일한 타입이어야 한다는 제약 조건을 표현한다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"타입 매개변수에 대체되는 모든 타입 인자는 해당 타입 매개변수에 부과된 모든 제약 조건과 요구사항을 충족해야 한다."}]},{"type":"paragraph","inlineContent":[{"text":"제네릭 ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" 절은 타입 매개변수를 포함하는 선언의 일부로 나타날 수 있으며, 타입 매개변수를 포함하는 선언 내부에 중첩된 선언의 일부로도 나타날 수 있다. 중첩된 선언의 제네릭 "},{"code":"where","type":"codeVoice"},{"type":"text","text":" 절은 여전히 외부 선언의 타입 매개변수를 참조할 수 있다. 그러나 해당 "},{"code":"where","type":"codeVoice"},{"type":"text","text":" 절의 요구사항은 해당 절이 작성된 선언에만 적용된다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"외부 선언에도 "},{"type":"codeVoice","code":"where"},{"text":" 절이 있는 경우, 두 절의 요구사항이 결합된다. 아래 예제에서 ","type":"text"},{"type":"codeVoice","code":"startsWithZero()"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"Element"},{"type":"text","text":"가 "},{"code":"SomeProtocol","type":"codeVoice"},{"text":"과 ","type":"text"},{"code":"Numeric","type":"codeVoice"},{"text":"을 모두 준수할 때만 사용할 수 있다.","type":"text"}]},{"code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"제네릭 함수나 이니셜라이저를 오버로드하려면 타입 매개변수에 다른 제약 조건이나 요구사항을 제공할 수 있다. 오버로드된 제네릭 함수나 이니셜라이저를 호출할 때, 컴파일러는 이러한 제약 조건을 사용해 어떤 오버로드된 함수나 이니셜라이저를 호출할지 결정한다."}]},{"type":"paragraph","inlineContent":[{"text":"제네릭 ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" 절에 대한 더 자세한 정보와 제네릭 함수 선언에서의 예제는 ","type":"text"},{"type":"text","text":"doc:Generics#Generic-Where-Clauses"},{"type":"text","text":"를 참고한다."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"generic-parameter-clause","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"<","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"text":"generic-parameter-list","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":">"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"generic-parameter-list","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" | "},{"inlineContent":[{"text":"generic-parameter","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-parameter-list"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"type-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol-composition-type"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-where-clause"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"where"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"requirement-list"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"requirement-list","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"requirement"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"conformance-requirement","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"inlineContent":[{"text":"same-type-requirement","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"conformance-requirement","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"conformance-requirement","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"same-type-requirement","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"=="}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]}],"style":"note","name":"제네릭 매개변수 절 문법","type":"aside"},{"text":"제네릭 인자 절","anchor":"%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9D%B8%EC%9E%90-%EC%A0%88","level":2,"type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"제네릭 인자 절"}]},{"type":"text","text":"은 제네릭 타입의 타입 인자를 지정한다. 제네릭 인자 절은 꺾쇠 괄호(<>)로 둘러싸여 있으며, 다음과 같은 형태를 가진다:"}],"type":"paragraph"},{"code":["<<#generic argument list#>>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"제네릭 인자 목록"}],"type":"emphasis"},{"text":"은 쉼표로 구분된 타입 인자들의 목록이다. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"타입 인자","type":"text"}]},{"type":"text","text":"는 제네릭 타입의 제네릭 매개변수 절에서 해당 타입 매개변수를 대체하는 실제 구체 타입의 이름이다. 이를 통해 해당 제네릭 타입의 특수화된 버전을 만들 수 있다. 아래 예제는 Swift 표준 라이브러리의 제네릭 Dictionary 타입을 간략화한 버전을 보여준다."}]},{"syntax":"swift","type":"codeListing","code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"]},{"inlineContent":[{"text":"제네릭 ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" 타입의 특수화된 버전인 "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":"는 제네릭 매개변수 "},{"type":"codeVoice","code":"Key: Hashable"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"Value"},{"type":"text","text":"를 구체 타입 인자인 "},{"code":"String","type":"codeVoice"},{"text":"과 ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":"로 대체하여 만들어진다. 각 타입 인자는 대체하는 제네릭 매개변수의 모든 제약 조건을 충족해야 하며, 제네릭 ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" 절에서 지정된 추가 요구사항도 만족해야 한다. 위 예제에서 "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" 타입 매개변수는 "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" 프로토콜을 준수해야 하므로, "},{"type":"codeVoice","code":"String"},{"text":"도 ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" 프로토콜을 준수해야 한다."}],"type":"paragraph"},{"inlineContent":[{"text":"타입 매개변수를 제네릭 타입의 특수화된 버전인 타입 인자로 대체할 수도 있다(해당 제약 조건과 요구사항을 충족한다면). 예를 들어, ","type":"text"},{"code":"Array<Element>","type":"codeVoice"},{"text":"의 타입 매개변수 ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":"를 정수 배열의 특수화된 버전인 ","type":"text"},{"type":"codeVoice","code":"Array<Int>"},{"type":"text","text":"로 대체하여, 요소가 정수 배열인 배열을 만들 수 있다."}],"type":"paragraph"},{"syntax":"swift","code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:GenericParametersAndArguments#Generic-Parameter-Clause"},{"text":"에서 언급했듯이, 제네릭 함수나 이니셜라이저의 타입 인자를 지정할 때는 제네릭 인자 절을 사용하지 않는다.","type":"text"}]},{"name":"제네릭 인자 절 문법","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"inlineContent":[{"text":"generic-argument-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"<"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":">"}],"type":"strong"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"generic-argument-list","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"text":"generic-argument","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"}],"type":"paragraph"}],"type":"aside","style":"note"}],"kind":"content"}],"abstract":[{"type":"text","text":"구체적인 타입을 추상화하기 위해 선언을 일반화한다."}],"sections":[],"metadata":{"title":"제네릭 타입과 인자"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"type":"topic","abstract":[{"type":"text","text":"여러 타입에 대해 동작하는 코드를 작성하고, 해당 타입에 대한 요구사항을 명시할 수 있다."}],"title":"제네릭","role":"article","url":"\/documentation\/the-swift-programming-language\/generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (6.1)","abstract":[],"kind":"article","role":"collection","type":"topic","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"}}}