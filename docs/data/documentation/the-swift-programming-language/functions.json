{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"type":"text","text":"특정 작업을 수행하는 독립적인 코드 블록인 함수를 정의하고 호출한다. 또한 함수의 인자에 레이블을 붙이고 반환 값을 사용하는 방법을 알아본다."}],"metadata":{"title":"함수"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"함수"}],"type":"strong"},{"type":"text","text":"는 특정 작업을 수행하는 독립적인 코드 블록이다. 함수에 작업 내용을 나타내는 이름을 붙이고, 이 이름을 사용해 필요할 때 함수를 “호출”하여 작업을 수행한다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift의 통합 함수 문법은 단순한 C 스타일 함수부터 각 매개변수에 이름과 인자 레이블이 있는 복잡한 Objective-C 스타일 메서드까지 표현할 수 있을 만큼 유연하다. 매개변수는 기본값을 제공해 함수 호출을 단순화할 수 있으며, 함수 실행이 완료된 후 전달된 변수를 수정하는 입출력(in-out) 매개변수로 전달할 수도 있다."}]},{"inlineContent":[{"type":"text","text":"Swift의 모든 함수는 매개변수 타입과 반환 타입으로 구성된 타입을 가진다. 이 타입을 Swift의 다른 타입처럼 사용할 수 있어, 함수를 다른 함수의 매개변수로 전달하거나 함수에서 함수를 반환하는 것이 쉽다. 또한 유용한 기능을 중첩 함수 범위 내에 캡슐화하기 위해 다른 함수 내부에 함수를 작성할 수도 있다."}],"type":"paragraph"},{"anchor":"%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%EC%99%80-%ED%98%B8%EC%B6%9C","text":"함수 정의와 호출","level":2,"type":"heading"},{"inlineContent":[{"text":"함수를 정의할 때, 입력으로 사용할 하나 이상의 이름과 타입을 가진 값(파라미터)을 선택적으로 정의할 수 있다. 또한 함수가 작업을 마친 후 출력으로 반환할 값의 타입(반환 타입)도 선택적으로 정의할 수 있다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"모든 함수는 수행할 작업을 설명하는 "},{"type":"emphasis","inlineContent":[{"text":"함수 이름","type":"text"}]},{"type":"text","text":"을 가진다. 함수를 사용하려면 함수 이름을 “호출”하고, 함수의 파라미터 타입과 일치하는 입력 값(인자)을 전달한다. 함수의 인자는 항상 파라미터 목록의 순서와 동일하게 제공해야 한다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"아래 예제의 함수는 "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":"이라는 이름을 가진다. 이 함수는 사람의 이름을 입력으로 받아 해당 사람에게 보낼 인사말을 반환한다. 이를 위해 하나의 입력 파라미터("},{"type":"codeVoice","code":"person"},{"text":"이라는 ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" 값)와 반환 타입("},{"type":"codeVoice","code":"String"},{"text":")을 정의한다. 반환 타입은 해당 사람에게 보낼 인사말을 포함한다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: String) -> String {","    let greeting = \"Hello, \" + person + \"!\"","    return greeting","}"]},{"inlineContent":[{"type":"text","text":"이 모든 정보는 "},{"type":"codeVoice","code":"func"},{"text":" 키워드로 시작하는 함수의 ","type":"text"},{"inlineContent":[{"text":"정의","type":"text"}],"type":"emphasis"},{"type":"text","text":"에 포함된다. 함수의 반환 타입은 "},{"inlineContent":[{"text":"반환 화살표","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"->"},{"type":"text","text":"(하이픈과 오른쪽 꺾쇠 괄호)로 표시하며, 그 뒤에 반환할 타입의 이름을 적는다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"함수 정의는 함수가 수행하는 작업, 받을 것으로 예상되는 입력, 작업을 마친 후 반환할 내용을 설명한다. 이 정의는 코드의 다른 부분에서 함수를 명확하게 호출할 수 있게 한다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(greet(person: \"Anna\"))","\/\/ \"Hello, Anna!\" 출력","print(greet(person: \"Brian\"))","\/\/ \"Hello, Brian!\" 출력"]},{"type":"paragraph","inlineContent":[{"code":"greet(person:)","type":"codeVoice"},{"text":" 함수를 호출할 때는 ","type":"text"},{"code":"person","type":"codeVoice"},{"text":" 인자 레이블 뒤에 ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" 값을 전달한다(예: "},{"type":"codeVoice","code":"greet(person: \"Anna\")"},{"type":"text","text":"). 이 함수는 "},{"type":"codeVoice","code":"String"},{"type":"text","text":" 값을 반환하므로, "},{"type":"codeVoice","code":"greet(person:)"},{"text":"을 ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" 함수 호출로 감싸 문자열을 출력하고 반환 값을 확인할 수 있다."}]},{"style":"note","name":"참고","type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"type":"text","text":" 함수는 첫 번째 인자에 대한 레이블이 없으며, 다른 인자들은 기본값이 있기 때문에 선택적이다. 이러한 함수 문법의 변형은 아래 "},{"type":"text","text":"doc:Functions#Function-Argument-Labels-and-Parameter-Names"},{"text":"와 ","type":"text"},{"type":"text","text":"doc:Functions#Default-Parameter-Values"},{"type":"text","text":"에서 다룬다."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"greet(person:)"},{"text":" 함수의 본문은 ","type":"text"},{"type":"codeVoice","code":"greeting"},{"text":"이라는 새로운 ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" 상수를 정의하고 간단한 인사말로 설정하는 것으로 시작한다. 이 인사말은 "},{"code":"return","type":"codeVoice"},{"text":" 키워드를 사용해 함수 밖으로 전달된다. ","type":"text"},{"code":"return greeting","type":"codeVoice"},{"type":"text","text":" 코드 줄에서 함수는 실행을 마치고 "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":"의 현재 값을 반환한다."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" 함수를 다른 입력 값으로 여러 번 호출할 수 있다. 위 예제는 입력 값으로 "},{"type":"codeVoice","code":"\"Anna\""},{"text":"와 ","type":"text"},{"type":"codeVoice","code":"\"Brian\""},{"type":"text","text":"을 전달했을 때의 결과를 보여준다. 함수는 각 경우에 맞춤형 인사말을 반환한다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"함수 본문을 더 짧게 만들려면 메시지 생성과 반환 문을 한 줄로 결합할 수 있다."}]},{"syntax":"swift","code":["func greetAgain(person: String) -> String {","    return \"Hello again, \" + person + \"!\"","}","print(greetAgain(person: \"Anna\"))","\/\/ \"Hello again, Anna!\" 출력"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"%ED%95%A8%EC%88%98-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80-%EB%B0%98%ED%99%98-%EA%B0%92","text":"함수 매개변수와 반환 값"},{"type":"paragraph","inlineContent":[{"text":"Swift에서 함수 매개변수와 반환 값은 매우 유연하게 정의할 수 있다. 단순한 유틸리티 함수부터 복잡한 함수까지 다양한 형태로 작성할 수 있다. 예를 들어, 이름 없는 단일 매개변수를 가진 간단한 함수부터, 표현력 있는 매개변수 이름과 다양한 옵션을 가진 복잡한 함수까지 만들 수 있다.","type":"text"}]},{"text":"매개변수가 없는 함수","anchor":"%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EC%97%86%EB%8A%94-%ED%95%A8%EC%88%98","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"함수는 반드시 입력 매개변수를 정의할 필요가 없다. 다음은 입력 매개변수가 없는 함수로, 호출할 때마다 항상 동일한 "},{"code":"String","type":"codeVoice"},{"type":"text","text":" 메시지를 반환한다:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func sayHelloWorld() -> String {","    return \"hello, world\"","}","print(sayHelloWorld())","\/\/ \"hello, world\" 출력"]},{"type":"paragraph","inlineContent":[{"text":"함수 정의에서는 매개변수를 받지 않더라도 함수 이름 뒤에 괄호를 반드시 포함해야 한다. 함수를 호출할 때도 함수 이름 뒤에 빈 괄호 쌍을 붙인다.","type":"text"}]},{"type":"heading","anchor":"%EC%97%AC%EB%9F%AC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A5%BC-%EA%B0%80%EC%A7%84-%ED%95%A8%EC%88%98","level":3,"text":"여러 매개변수를 가진 함수"},{"inlineContent":[{"text":"함수는 여러 개의 입력 매개변수를 가질 수 있다. 매개변수는 함수의 괄호 안에 쉼표로 구분하여 작성한다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"이 함수는 사람의 이름과 이미 인사했는지 여부를 입력으로 받아, 해당 사람에게 적절한 인사말을 반환한다:"}],"type":"paragraph"},{"type":"codeListing","code":["func greet(person: String, alreadyGreeted: Bool) -> String {","    if alreadyGreeted {","        return greetAgain(person: person)","    } else {","        return greet(person: person)","    }","}","print(greet(person: \"Tim\", alreadyGreeted: true))","\/\/ Prints \"Hello again, Tim!\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"greet(person:alreadyGreeted:)"},{"text":" 함수를 호출할 때는 ","type":"text"},{"code":"person","type":"codeVoice"},{"type":"text","text":" 레이블이 붙은 "},{"code":"String","type":"codeVoice"},{"type":"text","text":" 타입의 인자 값과 "},{"code":"alreadyGreeted","type":"codeVoice"},{"type":"text","text":" 레이블이 붙은 "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" 타입의 인자 값을 괄호 안에 쉼표로 구분하여 전달한다. 이 함수는 이전 섹션에서 보여준 "},{"code":"greet(person:)","type":"codeVoice"},{"text":" 함수와는 다른 함수다. 두 함수 모두 이름이 ","type":"text"},{"code":"greet","type":"codeVoice"},{"type":"text","text":"으로 시작하지만, "},{"type":"codeVoice","code":"greet(person:alreadyGreeted:)"},{"text":" 함수는 두 개의 인자를 받는 반면 ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"text":" 함수는 하나의 인자만 받는다.","type":"text"}]},{"text":"반환 값이 없는 함수","level":3,"type":"heading","anchor":"%EB%B0%98%ED%99%98-%EA%B0%92%EC%9D%B4-%EC%97%86%EB%8A%94-%ED%95%A8%EC%88%98"},{"type":"paragraph","inlineContent":[{"text":"함수는 반드시 반환 타입을 정의할 필요가 없다. 다음은 ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" 함수의 한 버전으로, 값을 반환하는 대신 자신의 "},{"code":"String","type":"codeVoice"},{"type":"text","text":" 값을 출력한다."}]},{"syntax":"swift","type":"codeListing","code":["func greet(person: String) {","    print(\"Hello, \\(person)!\")","}","greet(person: \"Dave\")","\/\/ Prints \"Hello, Dave!\""]},{"inlineContent":[{"text":"이 함수는 값을 반환할 필요가 없기 때문에, 함수 정의에 반환 화살표(","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":")나 반환 타입이 포함되지 않는다."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"엄밀히 말하면, 이 버전의 "},{"code":"greet(person:)","type":"codeVoice"},{"text":" 함수도 여전히 값을 반환한다. 반환 값이 정의되지 않았더라도, 반환 타입이 정의되지 않은 함수는 ","type":"text"},{"type":"codeVoice","code":"Void"},{"type":"text","text":" 타입의 특별한 값을 반환한다. 이는 단순히 빈 튜플로, "},{"type":"codeVoice","code":"()"},{"text":"로 표기된다.","type":"text"}]}],"name":"참고"},{"type":"paragraph","inlineContent":[{"type":"text","text":"함수의 반환 값은 호출 시 무시할 수 있다."}]},{"type":"codeListing","syntax":"swift","code":["func printAndCount(string: String) -> Int {","    print(string)","    return string.count","}","func printWithoutCounting(string: String) {","    let _ = printAndCount(string: string)","}","printAndCount(string: \"hello, world\")","\/\/ prints \"hello, world\" and returns a value of 12","printWithoutCounting(string: \"hello, world\")","\/\/ prints \"hello, world\" but doesn't return a value"]},{"inlineContent":[{"type":"text","text":"첫 번째 함수인 "},{"type":"codeVoice","code":"printAndCount(string:)"},{"type":"text","text":"는 문자열을 출력한 후, 그 문자열의 문자 수를 "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"로 반환한다. 두 번째 함수인 "},{"type":"codeVoice","code":"printWithoutCounting(string:)"},{"text":"는 첫 번째 함수를 호출하지만, 반환 값을 무시한다. 두 번째 함수가 호출되면, 첫 번째 함수에 의해 메시지가 여전히 출력되지만, 반환된 값은 사용되지 않는다.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"반환 값은 무시할 수 있지만, 반환 값이 있다고 선언한 함수는 항상 값을 반환해야 한다. 반환 타입이 정의된 함수는 값을 반환하지 않고 함수의 끝에 도달할 수 없으며, 이를 시도하면 컴파일 타임 오류가 발생한다."}]}],"style":"note","name":"참고","type":"aside"},{"level":3,"text":"여러 값을 반환하는 함수","type":"heading","anchor":"%EC%97%AC%EB%9F%AC-%EA%B0%92%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98"},{"type":"paragraph","inlineContent":[{"text":"함수에서 튜플 타입을 반환 타입으로 사용하면 하나의 복합 반환 값으로 여러 값을 반환할 수 있다.","type":"text"}]},{"inlineContent":[{"text":"아래 예제는 ","type":"text"},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":"라는 함수를 정의한다. 이 함수는 "},{"type":"codeVoice","code":"Int"},{"text":" 값 배열에서 가장 작은 수와 가장 큰 수를 찾는다:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func minMax(array: [Int]) -> (min: Int, max: Int) {","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" 함수는 두 개의 "},{"code":"Int","type":"codeVoice"},{"text":" 값을 포함하는 튜플을 반환한다. 이 값들은 ","type":"text"},{"code":"min","type":"codeVoice"},{"text":"과 ","type":"text"},{"type":"codeVoice","code":"max"},{"text":"라는 이름으로 레이블링되어 있어, 함수의 반환 값을 조회할 때 이름으로 접근할 수 있다.","type":"text"}]},{"inlineContent":[{"code":"minMax(array:)","type":"codeVoice"},{"text":" 함수의 본문은 먼저 ","type":"text"},{"code":"currentMin","type":"codeVoice"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":"라는 두 작업 변수를 배열의 첫 번째 정수 값으로 설정한다. 그런 다음 함수는 배열의 나머지 값을 순회하며 각 값이 "},{"code":"currentMin","type":"codeVoice"},{"type":"text","text":"과 "},{"code":"currentMax","type":"codeVoice"},{"type":"text","text":"보다 작은지 또는 큰지 확인한다. 마지막으로 전체 최소값과 최대값이 두 "},{"type":"codeVoice","code":"Int"},{"text":" 값의 튜플로 반환된다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"튜플의 멤버 값은 함수의 반환 타입의 일부로 이름이 지정되어 있기 때문에, 점 표기법을 사용해 찾은 최소값과 최대값을 검색할 수 있다:"}]},{"syntax":"swift","code":["let bounds = minMax(array: [8, -6, 2, 109, 3, 71])","print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","\/\/ Prints \"min is -6 and max is 109\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"튜플의 멤버는 함수에서 튜플이 반환될 때 이름을 지정할 필요가 없다. 왜냐하면 그 이름들은 이미 함수의 반환 타입의 일부로 지정되어 있기 때문이다."}]},{"level":4,"text":"옵셔널 튜플 반환 타입","anchor":"%EC%98%B5%EC%85%94%EB%84%90-%ED%8A%9C%ED%94%8C-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"함수에서 반환할 튜플 타입이 전체적으로 “값이 없을” 가능성이 있다면,"},{"type":"text","text":"\n"},{"text":"전체 튜플이 ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":"이 될 수 있다는 사실을 반영하기 위해 ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"옵셔널"}]},{"type":"text","text":" 튜플 반환 타입을 사용할 수 있다."},{"text":"\n","type":"text"},{"type":"text","text":"옵셔널 튜플 반환 타입은 튜플 타입의 닫는 괄호 뒤에 물음표를 붙여서 표현한다."},{"type":"text","text":"\n"},{"type":"text","text":"예를 들어 "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" 또는 "},{"type":"codeVoice","code":"(String, Int, Bool)?"},{"text":"과 같이 작성한다.","type":"text"}]},{"name":"참고","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"(Int, Int)?","type":"codeVoice"},{"type":"text","text":"와 같은 옵셔널 튜플 타입은"},{"text":"\n","type":"text"},{"type":"codeVoice","code":"(Int?, Int?)"},{"type":"text","text":"처럼 각 값이 옵셔널인 튜플과 다르다."},{"type":"text","text":"\n"},{"type":"text","text":"옵셔널 튜플 타입은 튜플 전체가 옵셔널이며,"},{"type":"text","text":"\n"},{"text":"튜플 내의 각 값이 옵셔널인 것은 아니다.","type":"text"}]}],"style":"note"},{"inlineContent":[{"text":"앞서 살펴본 ","type":"text"},{"code":"minMax(array:)","type":"codeVoice"},{"text":" 함수는 두 개의 ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" 값을 포함하는 튜플을 반환한다."},{"type":"text","text":"\n"},{"text":"하지만 이 함수는 전달받은 배열에 대한 안전성 검사를 수행하지 않는다.","type":"text"},{"type":"text","text":"\n"},{"type":"text","text":"만약 "},{"type":"codeVoice","code":"array"},{"type":"text","text":" 인자로 빈 배열이 전달되면,"},{"text":"\n","type":"text"},{"text":"위에서 정의한 ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"text":" 함수는 ","type":"text"},{"code":"array[0]","type":"codeVoice"},{"text":"에 접근하려고 시도할 때 런타임 오류를 발생시킨다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"빈 배열을 안전하게 처리하기 위해,"},{"text":"\n","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"text":" 함수를 옵셔널 튜플 반환 타입으로 작성하고","type":"text"},{"text":"\n","type":"text"},{"text":"배열이 비어 있을 때 ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":"을 반환할 수 있다:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func minMax(array: [Int]) -> (min: Int, max: Int)? {","    if array.isEmpty { return nil }","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"]},{"inlineContent":[{"type":"text","text":"옵셔널 바인딩을 사용해 이 버전의 "},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" 함수가"},{"type":"text","text":"\n"},{"text":"실제 튜플 값을 반환하는지 아니면 ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"을 반환하는지 확인할 수 있다:"}],"type":"paragraph"},{"type":"codeListing","code":["if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {","    print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","}","\/\/ Prints \"min is -6 and max is 109\""],"syntax":"swift"},{"text":"암시적 반환 함수","type":"heading","anchor":"%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%98%ED%99%98-%ED%95%A8%EC%88%98","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"함수 전체 본문이 단일 표현식으로 이루어진 경우, 해당 함수는 암시적으로 그 표현식을 반환한다. 예를 들어, 아래 두 함수는 동일한 동작을 수행한다:"}]},{"syntax":"swift","type":"codeListing","code":["func greeting(for person: String) -> String {","    \"Hello, \" + person + \"!\"","}","print(greeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\"","","func anotherGreeting(for person: String) -> String {","    return \"Hello, \" + person + \"!\"","}","print(anotherGreeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\""]},{"inlineContent":[{"type":"codeVoice","code":"greeting(for:)"},{"type":"text","text":" 함수의 전체 정의는 반환하는 인사 메시지이다. 이는 더 짧은 형태로 작성할 수 있음을 의미한다. "},{"code":"anotherGreeting(for:)","type":"codeVoice"},{"type":"text","text":" 함수는 더 긴 함수처럼 "},{"type":"codeVoice","code":"return"},{"text":" 키워드를 사용해 동일한 인사 메시지를 반환한다. ","type":"text"},{"code":"return","type":"codeVoice"},{"text":" 한 줄로 작성할 수 있는 모든 함수는 ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":"을 생략할 수 있다."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"doc:Properties#Shorthand-Getter-Declaration"},{"text":"에서 살펴보겠지만, 프로퍼티 게터도 암시적 반환을 사용할 수 있다.","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"참고","content":[{"type":"paragraph","inlineContent":[{"text":"암시적 반환 값으로 작성하는 코드는 반드시 어떤 값을 반환해야 한다. 예를 들어, ","type":"text"},{"type":"codeVoice","code":"print(13)"},{"type":"text","text":"을 암시적 반환 값으로 사용할 수는 없다. 그러나 Swift는 암시적 반환이 발생하지 않음을 알고 있기 때문에, "},{"type":"codeVoice","code":"fatalError(\"Oh no!\")"},{"type":"text","text":"와 같이 반환하지 않는 함수를 암시적 반환 값으로 사용할 수 있다."}]}]},{"text":"함수 인자 라벨과 파라미터 이름","level":2,"anchor":"%ED%95%A8%EC%88%98-%EC%9D%B8%EC%9E%90-%EB%9D%BC%EB%B2%A8%EA%B3%BC-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EC%9D%B4%EB%A6%84","type":"heading"},{"inlineContent":[{"text":"각 함수 파라미터는 ","type":"text"},{"inlineContent":[{"type":"text","text":"인자 라벨"}],"type":"emphasis"},{"type":"text","text":"과 "},{"inlineContent":[{"text":"파라미터 이름","type":"text"}],"type":"emphasis"},{"text":"을 가진다. 인자 라벨은 함수를 호출할 때 사용되며, 각 인자는 함수 호출 시 해당 라벨 앞에 표시된다. 파라미터 이름은 함수 구현 내부에서 사용된다. 기본적으로 파라미터는 파라미터 이름을 인자 라벨로 사용한다.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func someFunction(firstParameterName: Int, secondParameterName: Int) {","    \/\/ 함수 본문에서 firstParameterName과 secondParameterName은","    \/\/ 첫 번째와 두 번째 파라미터의 인자 값을 참조한다.","}","someFunction(firstParameterName: 1, secondParameterName: 2)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"모든 파라미터는 고유한 이름을 가져야 한다. 여러 파라미터가 동일한 인자 라벨을 가질 수 있지만, 고유한 인자 라벨을 사용하면 코드의 가독성을 높일 수 있다."}]},{"level":3,"text":"인자 레이블 지정하기","anchor":"%EC%9D%B8%EC%9E%90-%EB%A0%88%EC%9D%B4%EB%B8%94-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"인자 레이블은 파라미터 이름 앞에 공백으로 구분하여 작성한다:"}]},{"syntax":"swift","code":["func someFunction(argumentLabel parameterName: Int) {","    \/\/ 함수 내부에서 parameterName은 해당 파라미터의 인자 값을 참조한다.","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"다음은 ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"text":" 함수를 변형한 예제로, 사람의 이름과 고향을 받아 인사말을 반환한다:","type":"text"}]},{"code":["func greet(person: String, from hometown: String) -> String {","    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"","}","print(greet(person: \"Bill\", from: \"Cupertino\"))","\/\/ Prints \"Hello Bill!  Glad you could visit from Cupertino.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"인자 레이블을 사용하면 함수를 호출할 때 문장처럼 자연스럽게 표현할 수 있으며, 함수 본문도 읽기 쉽고 의도가 명확해진다.","type":"text"}]},{"type":"heading","text":"인자 라벨 생략하기","level":3,"anchor":"%EC%9D%B8%EC%9E%90-%EB%9D%BC%EB%B2%A8-%EC%83%9D%EB%9E%B5%ED%95%98%EA%B8%B0"},{"type":"paragraph","inlineContent":[{"type":"text","text":"함수에서 특정 파라미터의 인자 라벨을 생략하고 싶다면, 해당 파라미터에 대해 명시적인 인자 라벨 대신 언더스코어("},{"type":"codeVoice","code":"_"},{"text":")를 사용한다.","type":"text"}]},{"type":"codeListing","code":["func someFunction(_ firstParameterName: Int, secondParameterName: Int) {","    \/\/ 함수 본문에서 firstParameterName과 secondParameterName은","    \/\/ 각각 첫 번째와 두 번째 파라미터의 인자 값을 나타낸다.","}","someFunction(1, secondParameterName: 2)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"함수의 파라미터에 인자 라벨이 지정되어 있다면, 함수를 호출할 때 반드시 해당 라벨을 사용해야 한다."}],"type":"paragraph"},{"anchor":"%EA%B8%B0%EB%B3%B8-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EA%B0%92","text":"기본 매개변수 값","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"함수의 매개변수에 기본값을 정의할 수 있다. 매개변수의 타입 뒤에 값을 할당하면 된다. 기본값이 정의된 경우, 함수를 호출할 때 해당 매개변수를 생략할 수 있다.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {","    \/\/ 이 함수를 호출할 때 두 번째 인수를 생략하면,","    \/\/ 함수 내부에서 parameterWithDefault의 값은 12가 된다.","}","someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) \/\/ parameterWithDefault는 6","someFunction(parameterWithoutDefault: 4) \/\/ parameterWithDefault는 12"]},{"inlineContent":[{"type":"text","text":"기본값이 없는 매개변수는 함수 매개변수 목록의 앞쪽에 위치시킨다. 기본값이 없는 매개변수는 일반적으로 함수의 의미에 더 중요하다. 기본값이 없는 매개변수를 먼저 작성하면, 기본 매개변수를 생략하더라도 동일한 함수가 호출된다는 것을 쉽게 인식할 수 있다."}],"type":"paragraph"},{"anchor":"%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%9E%90-Variadic-Parameters","text":"가변 인자 (Variadic Parameters)","type":"heading","level":3},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"가변 인자"}]},{"text":"는 특정 타입의 값을 0개 이상 받을 수 있다. 함수를 호출할 때 입력값의 개수가 변할 수 있는 매개변수를 지정하려면 가변 인자를 사용한다. 가변 인자를 정의하려면 매개변수 타입 이름 뒤에 점 세 개(","type":"text"},{"type":"codeVoice","code":"..."},{"text":")를 추가한다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"가변 인자로 전달된 값은 함수 본문 내에서 적절한 타입의 배열로 사용할 수 있다. 예를 들어, ","type":"text"},{"type":"codeVoice","code":"numbers"},{"type":"text","text":"라는 이름의 가변 인자가 "},{"type":"codeVoice","code":"Double..."},{"text":" 타입으로 정의되었다면, 함수 본문 내에서 ","type":"text"},{"type":"codeVoice","code":"[Double]"},{"text":" 타입의 ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":"라는 상수 배열로 사용할 수 있다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"아래 예제는 임의의 길이를 가진 숫자 목록의 "},{"inlineContent":[{"type":"text","text":"산술 평균"}],"type":"emphasis"},{"type":"text","text":"("},{"inlineContent":[{"type":"text","text":"평균"}],"type":"emphasis"},{"text":")을 계산한다:","type":"text"}]},{"type":"codeListing","code":["func arithmeticMean(_ numbers: Double...) -> Double {","    var total: Double = 0","    for number in numbers {","        total += number","    }","    return total \/ Double(numbers.count)","}","arithmeticMean(1, 2, 3, 4, 5)","\/\/ 이 다섯 숫자의 산술 평균인 3.0을 반환한다","arithmeticMean(3, 8.25, 18.75)","\/\/ 이 세 숫자의 산술 평균인 10.0을 반환한다"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"하나의 함수는 여러 개의 가변 인자를 가질 수 있다. 가변 인자 뒤에 오는 첫 번째 매개변수는 반드시 인자 레이블을 가져야 한다. 이 레이블은 어떤 인자가 가변 인자에 전달되고, 어떤 인자가 가변 인자 뒤의 매개변수에 전달되는지를 명확히 구분한다."}]},{"type":"heading","level":3,"text":"입출력 매개변수","anchor":"%EC%9E%85%EC%B6%9C%EB%A0%A5-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98"},{"inlineContent":[{"type":"text","text":"함수의 매개변수는 기본적으로 상수로 취급된다. 함수 내부에서 매개변수의 값을 변경하려고 하면 컴파일 타임 에러가 발생한다. 이는 실수로 매개변수의 값을 변경하는 것을 방지한다. 만약 함수가 매개변수의 값을 수정하고, 그 변경 사항이 함수 호출이 끝난 후에도 유지되도록 하고 싶다면, 해당 매개변수를 "},{"type":"emphasis","inlineContent":[{"text":"입출력 매개변수","type":"text"}]},{"type":"text","text":"로 정의해야 한다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"입출력 매개변수는 매개변수의 타입 앞에 "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" 키워드를 붙여서 선언한다. 입출력 매개변수는 함수에 값이 "},{"type":"emphasis","inlineContent":[{"text":"전달","type":"text"}]},{"type":"text","text":"되고, 함수에 의해 수정된 후, 수정된 값이 함수 밖으로 "},{"inlineContent":[{"text":"반환","type":"text"}],"type":"emphasis"},{"text":"되어 원래 값을 대체한다. 입출력 매개변수의 동작과 관련된 컴파일러 최적화에 대한 자세한 내용은 ","type":"text"},{"text":"doc:Declarations#In-Out-Parameters","type":"text"},{"type":"text","text":"를 참고한다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"입출력 매개변수에는 변수만 인자로 전달할 수 있다. 상수나 리터럴 값은 수정할 수 없기 때문에 인자로 전달할 수 없다. 입출력 매개변수에 변수를 전달할 때는 변수 이름 앞에 앰퍼샌드("},{"type":"codeVoice","code":"&"},{"type":"text","text":")를 붙여서 함수가 해당 변수를 수정할 수 있음을 나타낸다."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"입출력 매개변수는 기본값을 가질 수 없으며, 가변 인자 매개변수는 ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":"으로 표시할 수 없다."}]}],"style":"note","name":"참고","type":"aside"},{"inlineContent":[{"type":"text","text":"다음은 두 개의 입출력 정수 매개변수 "},{"code":"a","type":"codeVoice"},{"type":"text","text":"와 "},{"type":"codeVoice","code":"b"},{"type":"text","text":"를 가진 "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" 함수의 예제이다:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func swapTwoInts(_ a: inout Int, _ b: inout Int) {","    let temporaryA = a","    a = b","    b = temporaryA","}"]},{"type":"paragraph","inlineContent":[{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":" 함수는 단순히 ","type":"text"},{"type":"codeVoice","code":"b"},{"text":"의 값을 ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":"에, "},{"code":"a","type":"codeVoice"},{"text":"의 값을 ","type":"text"},{"type":"codeVoice","code":"b"},{"text":"에 교환한다. 이 함수는 ","type":"text"},{"type":"codeVoice","code":"a"},{"text":"의 값을 ","type":"text"},{"type":"codeVoice","code":"temporaryA"},{"text":"라는 임시 상수에 저장하고, ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":"의 값을 "},{"type":"codeVoice","code":"a"},{"text":"에 할당한 다음, ","type":"text"},{"type":"codeVoice","code":"temporaryA"},{"text":"의 값을 ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":"에 할당하여 교환을 수행한다."}]},{"inlineContent":[{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" 함수를 호출할 때 "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" 타입의 두 변수를 전달하여 값을 교환할 수 있다. "},{"code":"someInt","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":"anotherInt","type":"codeVoice"},{"type":"text","text":"의 이름 앞에 앰퍼샌드("},{"type":"codeVoice","code":"&"},{"text":")를 붙여서 함수에 전달한다:","type":"text"}],"type":"paragraph"},{"code":["var someInt = 3","var anotherInt = 107","swapTwoInts(&someInt, &anotherInt)","print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")","\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"위 예제는 ","type":"text"},{"code":"someInt","type":"codeVoice"},{"text":"와 ","type":"text"},{"code":"anotherInt","type":"codeVoice"},{"text":"의 원래 값이 ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" 함수에 의해 수정되는 것을 보여준다. 이 값들은 원래 함수 외부에서 정의되었지만, 함수 내에서 변경되었다."}]},{"style":"note","name":"참고","content":[{"type":"paragraph","inlineContent":[{"text":"입출력 매개변수는 함수에서 값을 반환하는 것과 다르다. 위의 ","type":"text"},{"type":"codeVoice","code":"swapTwoInts"},{"type":"text","text":" 예제는 반환 타입을 정의하지 않았고 값을 반환하지도 않았지만, "},{"type":"codeVoice","code":"someInt"},{"text":"와 ","type":"text"},{"code":"anotherInt","type":"codeVoice"},{"type":"text","text":"의 값을 수정했다. 입출력 매개변수는 함수가 함수 본문의 범위를 벗어나서 영향을 미칠 수 있는 또 다른 방법이다."}]}],"type":"aside"},{"level":2,"anchor":"%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85","type":"heading","text":"함수 타입"},{"type":"paragraph","inlineContent":[{"text":"모든 함수는 특정한 ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"함수 타입","type":"text"}]},{"text":"을 가진다. 이 타입은 함수의 매개변수 타입과 반환 타입으로 구성된다.","type":"text"}]},{"inlineContent":[{"text":"예를 들어:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func addTwoInts(_ a: Int, _ b: Int) -> Int {","    return a + b","}","func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {","    return a * b","}"]},{"inlineContent":[{"text":"이 예제는 ","type":"text"},{"type":"codeVoice","code":"addTwoInts"},{"text":"와 ","type":"text"},{"type":"codeVoice","code":"multiplyTwoInts"},{"type":"text","text":"라는 두 개의 간단한 수학 함수를 정의한다. 이 함수들은 각각 두 개의 "},{"type":"codeVoice","code":"Int"},{"text":" 값을 받아서 적절한 수학 연산을 수행한 결과를 ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" 값으로 반환한다.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이 두 함수의 타입은 "},{"code":"(Int, Int) -> Int","type":"codeVoice"},{"type":"text","text":"이다. 이는 다음과 같이 읽을 수 있다:"}]},{"inlineContent":[{"text":"“두 개의 ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" 타입 매개변수를 가지고 "},{"type":"codeVoice","code":"Int"},{"text":" 타입의 값을 반환하는 함수.”","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"다음은 매개변수와 반환 값이 없는 함수의 예제이다:"}],"type":"paragraph"},{"code":["func printHelloWorld() {","    print(\"hello, world\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"이 함수의 타입은 "},{"code":"() -> Void","type":"codeVoice"},{"type":"text","text":"이다. 이는 “매개변수가 없고 "},{"code":"Void","type":"codeVoice"},{"type":"text","text":"를 반환하는 함수”라고 읽을 수 있다."}],"type":"paragraph"},{"anchor":"%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0","level":3,"text":"함수 타입 사용하기","type":"heading"},{"inlineContent":[{"text":"Swift에서 함수 타입은 다른 타입과 동일하게 사용한다. 예를 들어, 상수나 변수를 함수 타입으로 정의하고 해당 변수에 적절한 함수를 할당할 수 있다:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var mathFunction: (Int, Int) -> Int = addTwoInts"]},{"inlineContent":[{"text":"이 코드는 다음과 같이 해석할 수 있다:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"“","type":"text"},{"type":"codeVoice","code":"mathFunction"},{"text":"이라는 변수를 정의한다. 이 변수는 두 개의 ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" 값을 받아서 ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" 값을 반환하는 함수 타입이다. 이 새로운 변수에 "},{"type":"codeVoice","code":"addTwoInts"},{"text":"라는 함수를 참조하도록 설정한다.”","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"text":" 함수는 ","type":"text"},{"code":"mathFunction","type":"codeVoice"},{"text":" 변수와 동일한 타입을 가지므로, Swift의 타입 검사기는 이 할당을 허용한다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"이제 ","type":"text"},{"code":"mathFunction","type":"codeVoice"},{"text":"이라는 이름으로 할당된 함수를 호출할 수 있다:","type":"text"}]},{"syntax":"swift","code":["print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 5\""],"type":"codeListing"},{"inlineContent":[{"text":"동일한 타입을 가진 다른 함수도 비함수 타입과 마찬가지로 같은 변수에 할당할 수 있다:","type":"text"}],"type":"paragraph"},{"code":["mathFunction = multiplyTwoInts","print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 6\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"다른 타입과 마찬가지로, 함수를 상수나 변수에 할당할 때 Swift가 함수 타입을 추론하도록 할 수도 있다:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let anotherMathFunction = addTwoInts","\/\/ anotherMathFunction은 (Int, Int) -> Int 타입으로 추론된다"]},{"level":3,"type":"heading","anchor":"%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85%EC%9D%84-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0","text":"함수 타입을 매개변수 타입으로 사용하기"},{"type":"paragraph","inlineContent":[{"code":"(Int, Int) -> Int","type":"codeVoice"},{"text":"와 같은 함수 타입을 다른 함수의 매개변수 타입으로 사용할 수 있다. 이를 통해 함수의 일부 구현을 호출자가 함수를 호출할 때 제공하도록 할 수 있다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"다음은 위에서 정의한 수학 함수의 결과를 출력하는 예제이다:"}]},{"code":["func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {","    print(\"Result: \\(mathFunction(a, b))\")","}","printMathResult(addTwoInts, 3, 5)","\/\/ Prints \"Result: 8\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"이 예제는 ","type":"text"},{"code":"printMathResult(_:_:_:)","type":"codeVoice"},{"type":"text","text":"라는 함수를 정의한다. 이 함수는 세 개의 매개변수를 가진다. 첫 번째 매개변수는 "},{"code":"mathFunction","type":"codeVoice"},{"text":"이라고 하며, 타입은 ","type":"text"},{"code":"(Int, Int) -> Int","type":"codeVoice"},{"text":"이다. 이 첫 번째 매개변수로 해당 타입의 어떤 함수든 전달할 수 있다. 두 번째와 세 번째 매개변수는 각각 ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":"와 "},{"code":"b","type":"codeVoice"},{"type":"text","text":"라고 하며, 둘 다 "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" 타입이다. 이 두 값은 제공된 수학 함수의 입력 값으로 사용된다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"text":"를 호출할 때, ","type":"text"},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"type":"text","text":" 함수와 정수 값 "},{"type":"codeVoice","code":"3"},{"type":"text","text":"과 "},{"code":"5","type":"codeVoice"},{"type":"text","text":"를 전달한다. 이 함수는 "},{"type":"codeVoice","code":"3"},{"type":"text","text":"과 "},{"type":"codeVoice","code":"5"},{"type":"text","text":"를 사용해 제공된 함수를 호출하고, 결과 값 "},{"code":"8","type":"codeVoice"},{"text":"을 출력한다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":"의 역할은 적절한 타입의 수학 함수 호출 결과를 출력하는 것이다. 이 함수의 실제 구현이 무엇인지는 중요하지 않다. 단지 함수가 올바른 타입이기만 하면 된다. 이를 통해 "},{"code":"printMathResult(_:_:_:)","type":"codeVoice"},{"text":"는 타입 안전한 방식으로 일부 기능을 함수 호출자에게 넘길 수 있다.","type":"text"}]},{"text":"함수 타입을 반환 타입으로 사용하기","level":3,"type":"heading","anchor":"%ED%95%A8%EC%88%98-%ED%83%80%EC%9E%85%EC%9D%84-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0"},{"inlineContent":[{"type":"text","text":"함수 타입을 다른 함수의 반환 타입으로 사용할 수 있다. 이를 위해 반환 화살표("},{"type":"codeVoice","code":"->"},{"text":") 뒤에 완전한 함수 타입을 작성한다.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"다음 예제는 "},{"type":"codeVoice","code":"stepForward(_:)"},{"text":"와 ","type":"text"},{"code":"stepBackward(_:)","type":"codeVoice"},{"type":"text","text":"라는 두 가지 간단한 함수를 정의한다. "},{"type":"codeVoice","code":"stepForward(_:)"},{"text":" 함수는 입력값보다 1 큰 값을 반환하고, ","type":"text"},{"code":"stepBackward(_:)","type":"codeVoice"},{"type":"text","text":" 함수는 입력값보다 1 작은 값을 반환한다. 두 함수 모두 "},{"type":"codeVoice","code":"(Int) -> Int"},{"text":" 타입을 가진다:","type":"text"}],"type":"paragraph"},{"code":["func stepForward(_ input: Int) -> Int {","    return input + 1","}","func stepBackward(_ input: Int) -> Int {","    return input - 1","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"다음은 ","type":"text"},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"text":"라는 함수로, 반환 타입이 ","type":"text"},{"type":"codeVoice","code":"(Int) -> Int"},{"type":"text","text":"이다. 이 함수는 "},{"code":"backward","type":"codeVoice"},{"type":"text","text":"라는 불리언 매개변수를 기반으로 "},{"code":"stepForward(_:)","type":"codeVoice"},{"type":"text","text":" 함수 또는 "},{"type":"codeVoice","code":"stepBackward(_:)"},{"text":" 함수를 반환한다:","type":"text"}]},{"syntax":"swift","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    return backward ? stepBackward : stepForward","}"],"type":"codeListing"},{"inlineContent":[{"text":"이제 ","type":"text"},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"type":"text","text":"를 사용해 한 방향으로 이동하는 함수를 얻을 수 있다:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var currentValue = 3","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero는 이제 stepBackward() 함수를 참조한다"]},{"inlineContent":[{"type":"text","text":"위 예제는 "},{"type":"codeVoice","code":"currentValue"},{"type":"text","text":"라는 변수를 점점 0에 가깝게 이동시키기 위해 양수 또는 음수 단계가 필요한지 결정한다. "},{"code":"currentValue","type":"codeVoice"},{"text":"의 초기값은 ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":"이므로 "},{"type":"codeVoice","code":"currentValue > 0"},{"type":"text","text":"은 "},{"type":"codeVoice","code":"true"},{"type":"text","text":"를 반환하고, 이에 따라 "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":"는 "},{"type":"codeVoice","code":"stepBackward(_:)"},{"text":" 함수를 반환한다. 반환된 함수의 참조는 ","type":"text"},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":"라는 상수에 저장된다."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"이제 "},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":"가 올바른 함수를 참조하므로 이를 사용해 0까지 세는 것이 가능하다:"}]},{"code":["print(\"Counting to zero:\")","\/\/ Counting to zero:","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ 3...","\/\/ 2...","\/\/ 1...","\/\/ zero!"],"syntax":"swift","type":"codeListing"},{"text":"중첩 함수","type":"heading","level":2,"anchor":"%EC%A4%91%EC%B2%A9-%ED%95%A8%EC%88%98"},{"type":"paragraph","inlineContent":[{"text":"이번 장에서 여러분이 접한 모든 함수는 ","type":"text"},{"inlineContent":[{"type":"text","text":"전역 함수"}],"type":"emphasis"},{"text":"의 예제였다. 이 함수들은 전역 범위에서 정의된다. 하지만 다른 함수의 본문 안에서도 함수를 정의할 수 있는데, 이를 ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"중첩 함수"}]},{"text":"라고 부른다.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"중첩 함수는 기본적으로 외부에서 접근할 수 없지만, 이를 감싸는 함수 내에서는 호출하고 사용할 수 있다. 감싸는 함수는 중첩 함수 중 하나를 반환할 수도 있으며, 이렇게 하면 중첩 함수를 다른 범위에서 사용할 수 있게 된다."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"앞서 살펴본 "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"text":" 예제를 중첩 함수를 사용하고 반환하도록 다시 작성할 수 있다:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    func stepForward(input: Int) -> Int { return input + 1 }","    func stepBackward(input: Int) -> Int { return input - 1 }","    return backward ? stepBackward : stepForward","}","var currentValue = -4","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero는 이제 중첩 함수 stepForward()를 참조한다","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ -4...","\/\/ -3...","\/\/ -2...","\/\/ -1...","\/\/ zero!"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (6.1)","abstract":[],"kind":"article","role":"collection","type":"topic","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"}}}