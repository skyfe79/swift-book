{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"sections":[],"metadata":{"title":"The Swift Programming Language (6.1)"},"hierarchy":{"paths":[[]]},"kind":"article","topicSections":[{"anchor":"Welcome-to-Swift","title":"Welcome to Swift","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutSwift","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Compatibility","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"]},{"identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"],"anchor":"Language-Guide","title":"Language Guide"},{"title":"Language Reference","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/SummaryOfTheGrammar"],"anchor":"Language-Reference"},{"anchor":"Revision-History","identifiers":["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory"],"title":"Revision History"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"title":"메서드","url":"\/documentation\/the-swift-programming-language\/methods","abstract":[{"text":"특정 인스턴스나 타입에 속한 함수를 정의하고 호출하는 방법을 알아본다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"url":"\/documentation\/the-swift-programming-language\/collectiontypes","abstract":[{"text":"배열, 집합, 딕셔너리를 활용해 데이터를 구조화한다.","type":"text"}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","type":"topic","role":"article","title":"컬렉션 타입"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"url":"\/documentation\/the-swift-programming-language\/typecasting","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","abstract":[{"text":"값의 런타임 타입을 확인하고 더 구체적인 타입 정보를 제공한다.","type":"text"}],"kind":"article","title":"타입 캐스팅","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"url":"\/documentation\/the-swift-programming-language\/thebasics","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","abstract":[{"text":"Swift는 일반적인 데이터 타입을 다루고 기본 문법을 작성하는 방법을 제공한다. Swift는 정수를 표현하는 ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", 부동소수점 값을 표현하는 ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", 불리언 값을 표현하는 ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":", 그리고 텍스트를 표현하는 "},{"code":"String","type":"codeVoice"},{"text":"과 같은 기본 데이터 타입을 제공한다. 또한 Swift는 ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Set"},{"type":"text","text":", "},{"code":"Dictionary","type":"codeVoice"},{"text":"라는 세 가지 주요 컬렉션 타입의 강력한 버전도 제공하며, 이에 대한 자세한 내용은 ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","isActive":true},{"text":"에서 확인할 수 있다.","type":"text"}],"type":"topic","title":"기본 개념","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AboutSwift":{"url":"\/documentation\/the-swift-programming-language\/aboutswift","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutSwift","abstract":[{"text":"Swift 언어의 주요 목표를 이해해 보자.","type":"text"}],"kind":"article","title":"Swift 언어 개요","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"title":"고급 연산자","url":"\/documentation\/the-swift-programming-language\/advancedoperators","abstract":[{"text":"커스텀 연산자를 정의하고, 비트 연산을 수행하며, 빌더 구문을 사용하는 방법을 알아본다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures":{"url":"\/documentation\/the-swift-programming-language\/closures","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures","abstract":[{"text":"클로저는 이름 없는 함수를 만들지 않고도 함께 실행되는 코드를 그룹화한다. 클로저는 코드에서 전달하고 사용할 수 있는 독립적인 기능 블록이다. Swift의 클로저는 다른 프로그래밍 언어의 클로저, 익명 함수, 람다, 블록과 유사하다.","type":"text"}],"kind":"article","title":"클로저","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"title":"동시성(Concurrency)","url":"\/documentation\/the-swift-programming-language\/concurrency","abstract":[{"text":"비동기 작업을 수행한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"url":"\/documentation\/the-swift-programming-language\/statements","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","abstract":[{"text":"표현식을 그룹화하고 실행 흐름을 제어한다.","type":"text"}],"kind":"article","title":"구문","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"title":"제네릭 타입과 인자","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","abstract":[{"text":"구체적인 타입을 추상화하기 위해 선언을 일반화한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"text":"텍스트를 저장하고 조작한다.","type":"text"}],"kind":"article","title":"문자열과 문자","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"title":"제어 흐름","url":"\/documentation\/the-swift-programming-language\/controlflow","abstract":[{"text":"Swift는 다양한 제어 흐름 문법을 제공한다. 이를 통해 코드를 분기, 반복, 조기 종료 등의 방식으로 구조화할 수 있다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"url":"\/documentation\/the-swift-programming-language\/declarations","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","abstract":[{"text":"타입, 연산자, 변수, 그리고 다른 이름과 구조를 소개한다.","type":"text"}],"kind":"article","title":"선언문","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"title":"구조체와 클래스","url":"\/documentation\/the-swift-programming-language\/classesandstructures","abstract":[{"text":"데이터를 캡슐화하는 커스텀 타입을 정의한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"url":"\/documentation\/the-swift-programming-language\/opaquetypes","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","abstract":[{"text":"값의 타입에 대한 구현 세부사항을 숨기는 방법을 알아본다.","type":"text"}],"kind":"article","title":"불투명 타입과 박스 프로토콜 타입","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"title":"프로퍼티","url":"\/documentation\/the-swift-programming-language\/properties","abstract":[{"text":"프로퍼티는 인스턴스나 타입에 속한 저장된 값이나 계산된 값을 나타낸다. 프로퍼티는 특정 클래스, 구조체, 열거형과 값을 연결한다. 저장 프로퍼티는 인스턴스의 일부로 상수나 변수 값을 저장한다. 반면 계산 프로퍼티는 값을 저장하지 않고 계산한다. 계산 프로퍼티는 클래스, 구조체, 열거형에서 제공한다. 저장 프로퍼티는 클래스와 구조체에서만 제공한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"url":"\/documentation\/the-swift-programming-language\/functions","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","abstract":[{"text":"특정 작업을 수행하는 독립적인 코드 블록인 함수를 정의하고 호출한다. 또한 함수의 인자에 레이블을 붙이고 반환 값을 사용하는 방법을 알아본다.","type":"text"}],"role":"article","title":"함수"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","title":"타입","abstract":[{"text":"Swift에서 타입은 크게 두 가지로 나뉜다: 이름 있는 타입(named type)과 복합 타입(compound type).","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"이름 있는 타입","type":"text"}]},{"type":"text","text":"은 정의할 때 특정 이름을 부여할 수 있는 타입을 말한다. 클래스, 구조체, 열거형, 프로토콜이 여기에 속한다. 예를 들어, 사용자가 정의한 "},{"code":"MyClass","type":"codeVoice"},{"type":"text","text":"라는 클래스의 인스턴스는 "},{"code":"MyClass","type":"codeVoice"},{"text":" 타입을 가진다. 사용자가 정의한 이름 있는 타입 외에도, Swift 표준 라이브러리는 배열, 딕셔너리, 옵셔널 값 등을 표현하는 여러 이름 있는 타입을 제공한다.","type":"text"}],"role":"article","url":"\/documentation\/the-swift-programming-language\/types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"title":"열거형","url":"\/documentation\/the-swift-programming-language\/enumerations","abstract":[{"text":"열거형은 가능한 값들의 목록을 정의하는 커스텀 타입을 모델링한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","abstract":[{"text":"객체의 수명과 관계를 모델링한다.","type":"text"}],"kind":"article","title":"자동 참조 카운팅","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"url":"\/documentation\/the-swift-programming-language\/errorhandling","abstract":[{"type":"text","text":"프로그램에서 발생하는 에러 상황에 대응하고 복구하는 방법을 알아본다."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"topic","role":"article","title":"에러 처리"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"title":"매크로","url":"\/documentation\/the-swift-programming-language\/macros","abstract":[{"text":"컴파일 시점에 코드를 생성하기 위해 매크로를 사용한다. 매크로는 컴파일할 때 소스 코드를 변환하므로, 반복적인 코드를 직접 작성하지 않아도 된다. 컴파일 과정에서 Swift는 일반적인 코드 빌드 전에 매크로를 확장한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"type":"topic","abstract":[{"type":"text","text":"특정 타입이 반드시 구현해야 하는 요구사항을 정의한다."}],"title":"프로토콜","role":"article","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"url":"\/documentation\/the-swift-programming-language\/deinitialization","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","abstract":[{"text":"커스텀 정리가 필요한 리소스를 해제한다.","type":"text"}],"kind":"article","title":"리소스 해제","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"title":"메모리 안전성","url":"\/documentation\/the-swift-programming-language\/memorysafety","abstract":[{"text":"메모리 접근 시 충돌이 발생하지 않도록 코드를 구조화한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","abstract":[{"text":"문법의 가장 기본적인 요소를 사용한다.","type":"text"}],"kind":"article","title":"어휘 구조","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns","title":"패턴","abstract":[{"text":"값을 매칭하고 구조를 분해한다.","type":"text"}],"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"title":"기본 연산자","url":"\/documentation\/the-swift-programming-language\/basicoperators","abstract":[{"text":"값을 할당하거나, 산술 연산을 수행하거나, 비교하는 작업을 진행한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Compatibility":{"url":"\/documentation\/the-swift-programming-language\/compatibility","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Compatibility","abstract":[{"text":"이전 언어 모드에서 사용 가능한 기능을 알아본다.","type":"text"}],"kind":"article","title":"버전 호환성","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/RevisionHistory":{"title":"문서 개정 내역","url":"\/documentation\/the-swift-programming-language\/revisionhistory","abstract":[{"text":"이 책의 최근 변경 사항을 확인한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"url":"\/documentation\/the-swift-programming-language\/subscripts","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","abstract":[{"text":"컬렉션의 요소에 접근할 때 사용한다.","type":"text"}],"kind":"article","title":"서브스크립트","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"title":"초기화","url":"\/documentation\/the-swift-programming-language\/initialization","abstract":[{"text":"타입의 저장 프로퍼티에 초기값을 설정하고, 한 번만 실행되는 설정 작업을 수행한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"url":"\/documentation\/the-swift-programming-language\/attributes","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","abstract":[{"text":"선언과 타입에 추가 정보를 제공한다.","type":"text"}],"kind":"article","title":"속성","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"title":"상속","url":"\/documentation\/the-swift-programming-language\/inheritance","abstract":[{"text":"기능을 추가하거나 재정의하기 위해 서브클래스를 사용한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"url":"\/documentation\/the-swift-programming-language\/expressions","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","abstract":[{"text":"값에 접근하고, 수정하고, 할당하는 방법을 다룬다.","type":"text"}],"kind":"article","title":"표현식","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/NestedTypes":{"title":"중첩 타입","url":"\/documentation\/the-swift-programming-language\/nestedtypes","abstract":[{"text":"타입을 다른 타입의 스코프 안에 정의한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AboutTheLanguageReference":{"url":"\/documentation\/the-swift-programming-language\/aboutthelanguagereference","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AboutTheLanguageReference","abstract":[{"text":"공식 문법에서 사용하는 표기법을 먼저 숙지한다.","type":"text"}],"kind":"article","title":"언어 레퍼런스 소개","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"title":"Swift 둘러보기","url":"\/documentation\/the-swift-programming-language\/guidedtour","abstract":[{"text":"Swift의 기능과 문법을 탐구한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","abstract":[{"text":"옵셔널 값의 멤버에 접근할 때 언래핑 없이 사용할 수 있다.","type":"text"}],"kind":"article","title":"옵셔널 체이닝","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"title":"확장 기능","url":"\/documentation\/the-swift-programming-language\/extensions","abstract":[{"text":"기존 타입에 새로운 기능을 추가한다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"type":"topic","abstract":[{"type":"text","text":"여러 타입에 대해 동작하는 코드를 작성하고, 해당 타입에 대한 요구사항을 명시할 수 있다."}],"title":"제네릭","role":"article","url":"\/documentation\/the-swift-programming-language\/generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"url":"\/documentation\/the-swift-programming-language\/accesscontrol","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","abstract":[{"text":"코드의 가시성을 선언, 파일, 모듈 단위로 관리한다.","type":"text"}],"kind":"article","title":"접근 제어","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/SummaryOfTheGrammar":{"title":"문법 요약","url":"\/documentation\/the-swift-programming-language\/summaryofthegrammar","abstract":[{"text":"전체 공식 문법을 살펴본다.","type":"text"}],"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/SummaryOfTheGrammar"}}}